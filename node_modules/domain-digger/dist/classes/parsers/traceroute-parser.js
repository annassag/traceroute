"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var parser_1 = require('./parser');
var TracerouteParser = (function (_super) {
    __extends(TracerouteParser, _super);
    function TracerouteParser() {
        _super.apply(this, arguments);
        this.needToSkipLine = false;
    }
    TracerouteParser.prototype.process = function () {
        var lines = this.text.split('\n').map(function (vl) { return vl.trim(); }), records = [];
        for (var _i = 0, lines_1 = lines; _i < lines_1.length; _i++) {
            var ln = lines_1[_i];
            var words = ln
                .split(/(\s|\t)/)
                .map(function (vl) { return vl.trim(); })
                .filter(function (vl) { return vl.length > 0 && !~['ms'].indexOf(vl); }), state = this.stateLineEnter;
            for (var _a = 0, words_1 = words; _a < words_1.length; _a++) {
                var w = words_1[_a];
                state = state.call(this, w, records);
                if (this.needToSkipLine) {
                    this.needToSkipLine = false;
                    break;
                }
            }
        }
        return records;
    };
    TracerouteParser.prototype.buildEmptyRecord = function () {
        return {
            hopIndex: null,
            host: null,
            ipAddress: null,
            packetsTTLs: []
        };
    };
    TracerouteParser.prototype.buildPacketTTL = function (source, time) {
        return {
            'source': source,
            'time': time
        };
    };
    TracerouteParser.prototype.stateLineEnter = function (word, records) {
        if (~word.indexOf('traceroute')) {
            this.needToSkipLine = true;
            return this.stateLineEnter;
        }
        return this.stateHopIndex(word, records);
    };
    TracerouteParser.prototype.stateHopIndex = function (word, records) {
        var index = Number.parseInt(word);
        if (Number.isNaN(index)) {
            this.newPacketTTLSource = word;
            return this.stateDiffTTLPacketSourceResponseLineEnter;
        }
        else {
            var record = this.buildEmptyRecord();
            record.hopIndex = index;
            records.push(record);
            return this.stateHost;
        }
    };
    TracerouteParser.prototype.stateHost = function (word, records) {
        if (word == '*') {
            return this.statePacketTTL(word, records);
        }
        records[records.length - 1].host = word;
        return this.stateIpAddress;
    };
    TracerouteParser.prototype.stateIpAddress = function (word, records) {
        records[records.length - 1].ipAddress = word.slice(1, word.length - 1);
        return this.statePacketTTL;
    };
    TracerouteParser.prototype.statePacketTTL = function (word, records) {
        var rec = records[records.length - 1];
        rec.packetsTTLs.push(this.buildPacketTTL(rec.host, Number.parseFloat(word) || 0));
        return this.statePacketTTL;
    };
    TracerouteParser.prototype.stateDiffTTLPacketSourceResponseLineEnter = function (word, records) {
        var time = Number.parseFloat(word);
        if (isNaN(time)) {
            return this.stateDiffTTLPacketSourceResponseLineEnter;
        }
        var rec = records[records.length - 1];
        rec.packetsTTLs.push(this.buildPacketTTL(this.newPacketTTLSource, Number.parseFloat(word) || 0));
        return this.stateDiffTTLPacketSourceResponseLineEnter;
    };
    return TracerouteParser;
}(parser_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = TracerouteParser;
