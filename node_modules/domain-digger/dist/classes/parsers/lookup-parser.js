"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var parser_1 = require('./parser');
var LookupParser = (function (_super) {
    __extends(LookupParser, _super);
    function LookupParser() {
        _super.apply(this, arguments);
        this.linePattern = /(.+)\.\t*(\d+)\t*([A-Z]+)\t*([A-Z]+)\t*(.+)\n/g;
        this.mxDataPattern = /(\d+)\s(.+)\./;
        this.soaDataPattern = /(.+)\.\s(.+)\.\s(\d+)\s(\d+)\s(\d+)\s(\d+)\s(\d+)/;
    }
    LookupParser.prototype.fillObjectUsingPatternDescriptor = function (parsedData, descriptor) {
        var result = {}, j = 1;
        for (var key in descriptor) {
            result[key] = descriptor[key](parsedData[j], result);
            ++j;
        }
        return result;
    };
    LookupParser.prototype.convertHostAddressToEmail = function (exchangeAddress) {
        var firstDotPos = exchangeAddress.indexOf('.');
        return exchangeAddress.substr(0, firstDotPos) + '@'
            + exchangeAddress.substr(firstDotPos + 1);
    };
    LookupParser.prototype.prepareSoaDataPatternDescriptor = function () {
        var _this = this;
        return {
            server: function (value) { return value; },
            email: function (value) { return _this.convertHostAddressToEmail(value); },
            serial: Number.parseInt,
            refresh: Number.parseInt,
            retry: Number.parseInt,
            expire: Number.parseInt,
            minttl: Number.parseInt
        };
    };
    LookupParser.prototype.prepareMxDataPatternDescriptor = function () {
        var _this = this;
        return {
            'preference': Number.parseInt,
            'exchange': function (value) { return _this.convertHostAddressToEmail(value); }
        };
    };
    LookupParser.prototype.prepareRowTypesDescriptor = function () {
        var _this = this;
        return {
            'SOA': function (value) { return _this.fillObjectUsingPatternDescriptor(_this.soaDataPattern.exec(value), _this.prepareSoaDataPatternDescriptor()); },
            'MX': function (value) { return _this.fillObjectUsingPatternDescriptor(_this.mxDataPattern.exec(value), _this.prepareMxDataPatternDescriptor()); }
        };
    };
    LookupParser.prototype.prepareLinePatternDescriptor = function () {
        var rowTypesDescriptor = this.prepareRowTypesDescriptor();
        return {
            name: function (value) { return value; },
            ttl: Number.parseInt,
            class: function (value) { return value; },
            type: function (value) { return value; },
            data: function (value, row) {
                if (row.type && typeof rowTypesDescriptor[row.type] === 'function') {
                    var obj = rowTypesDescriptor[row.type](value);
                    obj.kind = row.type;
                    return obj;
                }
                else {
                    return { kind: 'Raw', data: value };
                }
            }
        };
    };
    LookupParser.prototype.process = function () {
        var line = null, result = [];
        while (line = this.linePattern.exec(this.text)) {
            result.push(this.fillObjectUsingPatternDescriptor(line, this.prepareLinePatternDescriptor()));
        }
        return result;
    };
    return LookupParser;
}(parser_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = LookupParser;
