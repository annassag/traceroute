"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var net = require('net');
var task_1 = require('./task');
var NetworkTask = (function (_super) {
    __extends(NetworkTask, _super);
    function NetworkTask(host, port, query, endSign, connectTimeout, responseTimeout, protocolEncoding) {
        if (connectTimeout === void 0) { connectTimeout = 5000; }
        if (responseTimeout === void 0) { responseTimeout = 10000; }
        if (protocolEncoding === void 0) { protocolEncoding = 'ASCII'; }
        _super.call(this);
        this.connectTimeout = connectTimeout;
        this.responseTimeout = responseTimeout;
        this.protocolEncoding = protocolEncoding;
        this.host = host;
        this.port = port;
        this.query = query;
        this.endSign = endSign;
    }
    NetworkTask.prototype.run = function () {
        var _this = this;
        var buff = new Buffer(this.query), socket = net.createConnection({
            'host': this.host,
            'port': this.port,
        }, function () { socket.write(buff); });
        socket.setTimeout(this.connectTimeout);
        return new Promise(function (resolve, reject) {
            var outOfTime = setTimeout(function () {
                socket.end();
                reject('Response timeout');
            }, _this.responseTimeout);
            var accum = '';
            socket.on('data', function (data) {
                accum += data.toString(_this.protocolEncoding);
                if (accum.endsWith(_this.endSign)) {
                    clearTimeout(outOfTime);
                    socket.end();
                    resolve(accum);
                }
            });
            socket.on('error', function (err) {
                socket.end();
                reject(err.message);
            });
            socket.on('timeout', function () {
                socket.end();
                reject('Connection timeout');
            });
        });
    };
    return NetworkTask;
}(task_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = NetworkTask;
