"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var child_process_1 = require('child_process');
var path = require('path');
var fs = require('fs');
var task_1 = require('./task');
var ShellTask = (function (_super) {
    __extends(ShellTask, _super);
    function ShellTask() {
        _super.apply(this, arguments);
    }
    ShellTask.prototype.isExecutableAvailable = function (executableName) {
        var possibleDirectories = [
            '/bin',
            '/usr/bin',
            '/usr/sbin',
            '/usr/local/bin',
        ];
        var name = this.getExecutableName(), found = false;
        for (var _i = 0, possibleDirectories_1 = possibleDirectories; _i < possibleDirectories_1.length; _i++) {
            var dir = possibleDirectories_1[_i];
            if (!fs.existsSync(path.join(dir, name))) {
                continue;
            }
            found = true;
        }
        return found;
    };
    ShellTask.prototype.run = function () {
        var executableName = this.getExecutableName();
        if (!this.isExecutableAvailable(executableName)) {
            throw new Error("An executable not found " + executableName);
        }
        var parameters = this.getParameters();
        return new Promise(function (resolve, reject) {
            var process = child_process_1.spawn(executableName, parameters), stdout = '', stderr = '';
            process.stdout.on('data', function (data) {
                stdout += data;
            });
            process.stderr.on('data', function (data) {
                stderr += data;
            });
            process.on('close', function (code) {
                if (code != 0) {
                    reject(new Error(stderr));
                    return;
                }
                resolve(stdout);
            });
        });
    };
    return ShellTask;
}(task_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ShellTask;
