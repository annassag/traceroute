"use strict";
var lookup_parser_1 = require('../classes/parsers/lookup-parser');
var parser = new lookup_parser_1.default(text());
function parsing(test) {
    var result = parser.process();
    test.equal(result.length, 12);
    for (var _i = 0, result_1 = result; _i < result_1.length; _i++) {
        var row = result_1[_i];
        test.strictEqual(row.name, 'yechuperka.me', 'Names are not equal');
        test.ok(~[1800, 3601].indexOf(row.ttl), 'TTL is not in domain');
        test.strictEqual(row.class, 'IN', 'Unknown class');
        test.ok(~['TXT', 'MX', 'A', 'SOA', 'NS'].indexOf(row.type), 'Unknown type');
        switch (row.data.kind) {
            case 'MX':
                var mxData = row.data;
                test.ok('preference' in mxData, 'Preference not found in MX data record');
                test.ok(~[20, 10, 15].indexOf(mxData.preference), 'Preference value is not in domain');
                test.ok(~[
                    'eforward5@registrar-servers.com',
                    'eforward2@registrar-servers.com',
                    'eforward4@registrar-servers.com',
                    'eforward3@registrar-servers.com',
                    'eforward1@registrar-servers.com',
                ].indexOf(row.data.exchange));
                break;
            case 'SOA':
                var soaData = row.data;
                test.strictEqual('dns1.registrar-servers.com', soaData.server, 'Server names are not equal');
                test.strictEqual('hostmaster@registrar-servers.com', soaData.email, 'Email are not equal');
                test.strictEqual(2016092701, soaData.serial, 'Serials are not equal');
                test.strictEqual(43200, soaData.refresh, 'Refresh times are not equal');
                test.strictEqual(3600, soaData.retry, 'Retry times are not equal');
                test.strictEqual(604800, soaData.expire, 'Expire times are not equal');
                test.strictEqual(3601, soaData.minttl, 'Min TTL times are not equal');
                break;
            case 'Raw':
                var rawData = row.data;
                test.ok(~[
                    '"v=spf1 include:spf.efwd.registrar-servers.com ~all"',
                    '162.255.119.248',
                    'dns2.registrar-servers.com.',
                    'dns1.registrar-servers.com.'
                ].indexOf(rawData.data), 'Raw data not found in list');
                break;
        }
    }
    test.done();
}
exports.parsing = parsing;
function text() {
    return "\nTrying \"yechuperka.me\"\n;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 41309\n;; flags: qr rd ra; QUERY: 1, ANSWER: 10, AUTHORITY: 2, ADDITIONAL: 4\n\n;; QUESTION SECTION:\n;yechuperka.me.\t\t\tIN\tANY\n\n;; ANSWER SECTION:\nyechuperka.me.\t\t1800\tIN\tTXT\t\"v=spf1 include:spf.efwd.registrar-servers.com ~all\"\nyechuperka.me.\t\t1800\tIN\tMX\t20 eforward5.registrar-servers.com.\nyechuperka.me.\t\t1800\tIN\tMX\t10 eforward2.registrar-servers.com.\nyechuperka.me.\t\t1800\tIN\tMX\t15 eforward4.registrar-servers.com.\nyechuperka.me.\t\t1800\tIN\tMX\t10 eforward3.registrar-servers.com.\nyechuperka.me.\t\t1800\tIN\tMX\t10 eforward1.registrar-servers.com.\nyechuperka.me.\t\t1800\tIN\tA\t162.255.119.248\nyechuperka.me.\t\t3601\tIN\tSOA\tdns1.registrar-servers.com. hostmaster.registrar-servers.com. 2016092701 43200 3600 604800 3601\nyechuperka.me.\t\t1800\tIN\tNS\tdns2.registrar-servers.com.\nyechuperka.me.\t\t1800\tIN\tNS\tdns1.registrar-servers.com.\n\n;; AUTHORITY SECTION:\nyechuperka.me.\t\t1800\tIN\tNS\tdns2.registrar-servers.com.\nyechuperka.me.\t\t1800\tIN\tNS\tdns1.registrar-servers.com.\n\n;; ADDITIONAL SECTION:\neforward5.registrar-servers.com. 12611 IN A\t198.54.122.252\neforward2.registrar-servers.com. 11586 IN A\t198.54.122.254\ndns2.registrar-servers.com. 169124 IN\tA\t216.87.152.33\ndns1.registrar-servers.com. 166747 IN\tA\t216.87.155.33\n\nReceived 438 bytes from 192.168.43.1#53 in 289 ms\n    ";
}
